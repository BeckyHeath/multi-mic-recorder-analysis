plot <- `Yellow_bird01` | `Yellow_bird02` | `Yellow_pink03` | `Yellow_pink02`
plot2 <- `YelloGreen_bird01`| `YelloGreen_bird02` | `YelloGreen_pink01` | `YelloGreen_pink02`
plot3 <- `YelloGreen_bird03` | `YellowGreen_flipped_pink01`| `YellowGreen_flipped_bird01` | `YellowGreen_flipped_pink01`
plot/plot2/plot3
########################################################################### .
# Scripts for Analysing Post Deployment Localisations
#
# Becky Heath
# r.heath18@imperial.ac.uk
#
# Autumn 2021/Spring 2022
##### Load Packages and set working directory #####
library(stringr)
library(ggplot2)
library(plyr)
library(patchwork)
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
##### Define Test File Location #####
file_directory = "Data/CompleteLabLocalisation/OutPost/AdjGain"
AngleDifPath = "Data/CompleteLabLocalisation/AngleDifferences/PostAdjGain3.csv"
##### Define Functions #####
# Load in true values:
true <- read.csv("Data/CompleteLabLocalisation/Real_Location_Post.csv") #POST
section_data <- function(df){
# Function to group the real data into distinct time periods??
# The recordings are then in groups to better compare real/predicted
#
# recallibrate start position to -180
# 30deg mismatch in the transfer function (See HARKTOOL5)
df$Start.azimuth <- df$Start.azimuth - 30 # do HARK config Correction
df$Start.azimuth <- df$Start.azimuth - 180 # do experiment orientation correction
# Correct for Angle Flip-over
df$Start.azimuth[df$Start.azimuth < -180] <- (df$Start.azimuth[df$Start.azimuth < -180] + 360)
# Make Sure Recordings are compared to the right test tone
# Numbers not divisible by 15 will be Removed
df$Start.time[df$Start.time < 7] <- 1  # Sweep Signal (ignored)
df$Start.time[df$Start.time > 14 & df$Start.time < 19] <- 15  # First Tone
df$Start.time[df$Start.time > 29 & df$Start.time < 31] <- 30  # Second Tone
df$Start.time[df$Start.time > 44 & df$Start.time < 46] <- 45  # Third Tone
df$Start.time[df$Start.time > 59 & df$Start.time < 61] <- 60  # Fourth Tone
df$Start.time[df$Start.time > 74.49 & df$Start.time < 77] <- 75  # Fifth Tone
return(df)
}
Angle_Dif_Plots <- function(df,tag,label){
# Creates plots showing true vs. prediced values
# Merge Data
df <- df[, c("Start.time", "Start.azimuth")]
names(df)[names(df) == "Start.azimuth"] <- "Predicted.Azimuth"
merge_df <- merge(df, true, by=c("Start.time"),all=TRUE)
names(merge_df)[names(merge_df) == "Start.azimuth"] <- "Real.Azimuth"
merge_df_er <- merge_df[complete.cases(merge_df),]
differences <- getDifferences(merge_df_er)
differences <- as.data.frame(differences)
# Apprend to difference matrix
outDif <- differences
outDif <- outDif %>%
add_column(file = label,
.before= "x")
diffMatrix <<- rbind(diffMatrix, outDif)
names(differences)[names(differences) == "x"] <- "True.Azimuth"
plot <- ggplot(differences, aes(True.Azimuth, difference))+
ggtitle(label_g) +
geom_point(color = "Red", size =4, shape = 4, stroke = 1.5)+
geom_hline(yintercept=0)+
xlim(-180,180)+
ylim(-180,180)+
xlab("True Angle") +
#ylab("Angle Difference") +
#annotate("text", x = -150, y = 150, label = tag) +
theme_minimal()
plot
return(plot)
}
getDifferences <- function(df){
# Finds difference (accounting for 180 + 5 = -175)!
# It then returns an array of true v. pred for the
# difference of smallest magnitude
#
#
# df = dataframe containing true vs. pred data =
# Seperate true and pred
x <- df$Real.Azimuth
y <- df$Predicted.Azimuth
# Calculate Differences
dif <- y-x
dif1 <- y - x - 360
dif2 <- y - x + 360
# Find Smallest
difference <- apply(cbind(dif,dif1,dif2), 1, function(z) z[which.min(abs(z))])
outDf <- cbind(x,difference)
names(outDf)[names(outDf) == "outDF"] <- "True.Azimuth"
return(outDf)
}
##### Generate Real vs. Predicted Plots ####
j=0
diffMatrix <- data.frame(file = character(),
x = numeric(),
difference = numeric(),
stringsAsFactors = FALSE)
# Load in all the files you need:
for(i in list.dirs(file_directory, recursive = FALSE)){
path = paste(as.character(i),"sourcelist.csv", sep = "/")
i_file = read.csv(path, sep = "\t")
# Generate Label
# tidy label/ graph title name:
label = str_remove(as.character(i), file_directory)
label = str_remove(label,"/localized_")
label = str_remove(label,"_PostMortemLoc")
label = str_remove(label,"_PostMortem")
label = str_remove(label,".wav")
#label = str_remove(label,"AdjG_")
j=j+1
#  tag = str_remove(label,".*_")
#  tag = gsub('[[:digit:]]+', '', tag)
#
#  # Set Graph Labels (Tags)
#  print(paste0("J =",tag))
#
#  if(tag == "pink"){
#    label_g = "Pink Noise"
#  } else if(tag=="bird"){
#   label_g = "Bird Song"
# } else {
#    label_g ="??????"
#  }
label_g=label
tag =label_g
# Stop files that didn't catch any signals tripping out the loop
if(nrow(i_file) == 0){
next
}
i_file <- section_data(i_file)
o_plot <- Angle_Dif_Plots(i_file,tag,label)
assign(label, o_plot)
}
write.csv(diffMatrix,AngleDifPath,row.names = FALSE)
# PLOTS
#post
## Raw
#plot <- `Yellow_bird01` | `Yellow_bird02` | `Yellow_pink03` | `Yellow_pink02`
#plot2 <- `Blue_bird01`| `Blue_bird02` | `Blue_pink01` | `YellowGreen_flipped_bird01`
#plot3 <- `Blue_Repowered_bird01`| `Blue_Repowered_bird02` | `Blue_Repowered_pink01` | `Blue_Repowered_pink02`
#plot/plot2/plot3
## AdjGain
plot <- `Yellow_bird01` | `Yellow_bird02` | `Yellow_pink03` | `Yellow_pink02`
plot2 <- `YelloGreen_bird01`| `YelloGreen_bird02` | `YelloGreen_pink01` | `YelloGreen_pink02`
plot3 <- `YelloGreen_bird03` | `YellowGreen_flipped_pink01`| `YellowGreen_flipped_bird01` | `YellowGreen_flipped_pink01`
plot/plot2/plot3
########################################################################### .
# Scripts for Analysing Post Deployment Localisations
#
# Becky Heath
# r.heath18@imperial.ac.uk
#
# Autumn 2021/Spring 2022
##### Load Packages and set working directory #####
library(stringr)
library(ggplot2)
library(plyr)
library(patchwork)
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
##### Define Test File Location #####
file_directory = "Data/CompleteLabLocalisation/OutPost/AdjGain"
AngleDifPath = "Data/CompleteLabLocalisation/AngleDifferences/PostAdjGain3.csv"
##### Define Functions #####
# Load in true values:
true <- read.csv("Data/CompleteLabLocalisation/Real_Location_Post.csv") #POST
section_data <- function(df){
# Function to group the real data into distinct time periods??
# The recordings are then in groups to better compare real/predicted
#
# recallibrate start position to -180
# 30deg mismatch in the transfer function (See HARKTOOL5)
df$Start.azimuth <- df$Start.azimuth - 30 # do HARK config Correction
df$Start.azimuth <- df$Start.azimuth - 180 # do experiment orientation correction
# Correct for Angle Flip-over
df$Start.azimuth[df$Start.azimuth < -180] <- (df$Start.azimuth[df$Start.azimuth < -180] + 360)
# Make Sure Recordings are compared to the right test tone
# Numbers not divisible by 15 will be Removed
df$Start.time[df$Start.time < 7] <- 1  # Sweep Signal (ignored)
df$Start.time[df$Start.time > 14 & df$Start.time < 19] <- 15  # First Tone
df$Start.time[df$Start.time > 29 & df$Start.time < 31] <- 30  # Second Tone
df$Start.time[df$Start.time > 44 & df$Start.time < 46] <- 45  # Third Tone
df$Start.time[df$Start.time > 59 & df$Start.time < 61] <- 60  # Fourth Tone
df$Start.time[df$Start.time > 74.49 & df$Start.time < 77] <- 75  # Fifth Tone
return(df)
}
Angle_Dif_Plots <- function(df,tag,label){
# Creates plots showing true vs. prediced values
# Merge Data
df <- df[, c("Start.time", "Start.azimuth")]
names(df)[names(df) == "Start.azimuth"] <- "Predicted.Azimuth"
merge_df <- merge(df, true, by=c("Start.time"),all=TRUE)
names(merge_df)[names(merge_df) == "Start.azimuth"] <- "Real.Azimuth"
merge_df_er <- merge_df[complete.cases(merge_df),]
differences <- getDifferences(merge_df_er)
differences <- as.data.frame(differences)
# Apprend to difference matrix
outDif <- differences
outDif <- outDif %>%
add_column(file = label,
.before= "x")
diffMatrix <<- rbind(diffMatrix, outDif)
names(differences)[names(differences) == "x"] <- "True.Azimuth"
plot <- ggplot(differences, aes(True.Azimuth, difference))+
ggtitle(label_g) +
geom_point(color = "Red", size =4, shape = 4, stroke = 1.5)+
geom_hline(yintercept=0)+
xlim(-180,180)+
ylim(-180,180)+
xlab("True Angle") +
#ylab("Angle Difference") +
#annotate("text", x = -150, y = 150, label = tag) +
theme_minimal()
plot
return(plot)
}
getDifferences <- function(df){
# Finds difference (accounting for 180 + 5 = -175)!
# It then returns an array of true v. pred for the
# difference of smallest magnitude
#
#
# df = dataframe containing true vs. pred data =
# Seperate true and pred
x <- df$Real.Azimuth
y <- df$Predicted.Azimuth
# Calculate Differences
dif <- y-x
dif1 <- y - x - 360
dif2 <- y - x + 360
# Find Smallest
difference <- apply(cbind(dif,dif1,dif2), 1, function(z) z[which.min(abs(z))])
outDf <- cbind(x,difference)
names(outDf)[names(outDf) == "outDF"] <- "True.Azimuth"
return(outDf)
}
##### Generate Real vs. Predicted Plots ####
j=0
diffMatrix <- data.frame(file = character(),
x = numeric(),
difference = numeric(),
stringsAsFactors = FALSE)
# Load in all the files you need:
for(i in list.dirs(file_directory, recursive = FALSE)){
path = paste(as.character(i),"sourcelist.csv", sep = "/")
i_file = read.csv(path, sep = "\t")
# Generate Label
# tidy label/ graph title name:
label = str_remove(as.character(i), file_directory)
label = str_remove(label,"/localized_")
label = str_remove(label,"_PostMortemLoc")
label = str_remove(label,"_PostMortem")
label = str_remove(label,".wav")
#label = str_remove(label,"AdjG_")
j=j+1
#  tag = str_remove(label,".*_")
#  tag = gsub('[[:digit:]]+', '', tag)
#
#  # Set Graph Labels (Tags)
#  print(paste0("J =",tag))
#
#  if(tag == "pink"){
#    label_g = "Pink Noise"
#  } else if(tag=="bird"){
#   label_g = "Bird Song"
# } else {
#    label_g ="??????"
#  }
label_g=label
tag =label_g
# Stop files that didn't catch any signals tripping out the loop
if(nrow(i_file) == 0){
next
}
i_file <- section_data(i_file)
o_plot <- Angle_Dif_Plots(i_file,tag,label)
assign(label, o_plot)
}
write.csv(diffMatrix,AngleDifPath,row.names = FALSE)
# PLOTS
#post
## Raw
#plot <- `Yellow_bird01` | `Yellow_bird02` | `Yellow_pink03` | `Yellow_pink02`
#plot2 <- `Blue_bird01`| `Blue_bird02` | `Blue_pink01` | `YellowGreen_flipped_bird01`
#plot3 <- `Blue_Repowered_bird01`| `Blue_Repowered_bird02` | `Blue_Repowered_pink01` | `Blue_Repowered_pink02`
#plot/plot2/plot3
## AdjGain
plot <- `Yellow_bird01` | `Yellow_bird02` | `Yellow_pink03` | `Yellow_pink02`
plot2 <- `YelloGreen_bird01`| `YelloGreen_bird02` | `YelloGreen_pink01` | `YelloGreen_pink02`
plot3 <- `YelloGreen_bird03` | `YellowGreen_flipped_pink01`| `YellowGreen_flipped_bird01` | `YellowGreen_flipped_pink01`
plot/plot2/plot3
########################################################################### .
# Scripts for plotting and analysing angle differences.
# Takes HARKBird outputs from a standardised experiment,
# the file used here was generated through "Angle_Dif_LocalisationPre.r"
# and "Angle_Dif_LocalisationPost.r"
#
# Becky Heath
# r.heath18@imperial.ac.uk
#
# Summer 2022
##### Load Packages and set working directory #####
library(ggplot2)
library(tidyr)
library(dplyr)
library(wesanderson)
library(patchwork)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load in values:
difData <- read.csv("Data/CompleteLabLocalisation/AngleDifferences/allAngles.csv")
difData$tone <- as.factor(difData$tone)
difData$recorder <- as.factor(difData$recorder)
difData$wp <- as.factor(difData$wp)
difData$testTone <- as.factor(difData$testTone)
difData$gainTest <- as.factor(difData$gainTest)
##### Define Functions ####
find_error <- function(difData){
# finds the mean and sd of the error and r-sq when
# given a difference values
dif <- difData$difference
mean_val <- mean(dif)
sd_val <- sd(dif)
r_sq <- 1-sum((dif)^2)/sum((dif - mean(dif))^2)
out <- c(mean_val,sd_val,r_sq)
return(out)
}
true_pred_plots <- function(df, label){
# Creates plots showing true vs. predicted values
plot <- ggplot(df, aes(trueAzimuth, difference, col = recorder, shape = tone))+
ggtitle(label) +
geom_jitter(size =3, alpha = 0.7, position = position_jitter(width=7,height=0))+
scale_color_manual(values = c("2" =  wes_palette("Darjeeling1",5)[1],
"3"= "black",
"Blue"= wes_palette("Darjeeling1",5)[5],
"Yellow" = wes_palette("Darjeeling1",5)[3],
"yellowGreen" = wes_palette("Darjeeling1",5)[2])) +
scale_shape_manual(values = c("y" = 16,
"echo"= 10)) +
geom_hline(yintercept=0)+
xlim(-185,185)+ # to allow for jitter
ylim(-185,185)+ # to allow for jitter
#xlab("Predicted") +
#ylab("True") +
annotate("text", x = -110, y = 150, label ="") +
theme_minimal()+
theme(legend.position = "none") +
theme(axis.text.x=element_blank())+
theme(axis.text.y=element_blank())+
theme(axis.title.x=element_blank())+
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(size = 10))
return(plot)
}
##### Run Analysis on the Pre ####
# get right dataset and get rid of Duplicates
pre <- difData[difData$time == "pre", ]
pre <- pre[, !(names(pre) %in% c("gainTest", "gainAdded"))]
pre <- distinct(pre)
for(i in levels(pre$wp)){
if(i=="n"){
WPstr = "NoWP"
}else{
WPstr = "WP"
}
preWP <- pre[pre$wp == i, ]
for(j in levels(preWP$testTone)){
toneStr = j
# Create Label
label = paste(WPstr, ":",toneStr,sep="")
testDF <- preWP[preWP$testTone == j, ]
# Find Errors!
error_data <- find_error(testDF)
printout <- paste0("\n###############\nFile (with echos):", label, "\nMean Dif:", error_data[1],"\nSD:", error_data[2], "\nR_sq:", error_data[3])
cat(printout)
plot <- true_pred_plots(testDF,label)
assign(label,plot)
#Remove Echos (false positives)
testDF <- testDF[testDF$tone == "y", ]
error_data <- find_error(testDF)
printout <- paste0("\n###############\nFile (without echos):", label, "\nMean Dif:", error_data[1],"\nSD:", error_data[2], "\nR_sq:", error_data[3])
cat(printout)
}
}
plot1 <- `WP:bird` | `NoWP:bird`
plot2 <- `WP:pinknoise` | `NoWP:pinknoise`
plot <- plot1/plot2
plot
##### Run Analysis on the Post ####
# get right dataset and get rid of Duplicates
post <- difData[difData$time == "post", ]
post <- distinct(post)
for(i in levels(post$gainTest)){
if(i=="n"){
WPstr = "raw"
}else{
WPstr = "gainTest"
}
postWP <- post[post$gainTest == i, ]
for(j in levels(post$testTone)){
toneStr = j
# Create Label
label = paste(WPstr, ":",toneStr,sep="")
testDF <- postWP[postWP$testTone == j, ]
# Find Errors!
error_data <- find_error(testDF)
printout <- paste0("\n###############\nFile (with echos):", label, "\nMean Dif:", error_data[1],"\nSD:", error_data[2], "\nR_sq:", error_data[3])
cat(printout)
plot <- true_pred_plots(testDF,label)
assign(label,plot)
#Remove Echos (false positives)
testDF <- testDF[testDF$tone == "y", ]
error_data <- find_error(testDF)
printout <- paste0("\n###############\nFile (without echos):", label, "\nMean Dif:", error_data[1],"\nSD:", error_data[2], "\nR_sq:", error_data[3])
cat(printout)
}
}
plot1 <- `raw:bird` | `gainTest:bird`
plot2 <- `raw:pinknoise` | `gainTest:pinknoise`
plot <- plot1/plot2
plot
for(i in levels(pre$wp)){
if(i=="n"){
WPstr = "NoWP"
}else{
WPstr = "WP"
}
preWP <- pre[pre$wp == i, ]
for(j in levels(preWP$testTone)){
toneStr = j
# Create Label
label = paste(WPstr, ":",toneStr,sep="")
testDF <- preWP[preWP$testTone == j, ]
# Find Errors!
error_data <- find_error(testDF)
printout <- paste0("\n###############\nFile (with echos):", label, "\nMean Dif:", error_data[1],"\nSD:", error_data[2], "\nR_sq:", error_data[3])
cat(printout)
plot <- true_pred_plots(testDF,label)
assign(label,plot)
#Remove Echos (false positives)
testDF <- testDF[testDF$tone == "y", ]
error_data <- find_error(testDF)
printout <- paste0("\n###############\nFile (without echos):", label, "\nMean Dif:", error_data[1],"\nSD:", error_data[2], "\nR_sq:", error_data[3])
cat(printout)
}
}
plot1 <- `WP:bird` | `NoWP:bird`
plot2 <- `WP:pinknoise` | `NoWP:pinknoise`
plot <- plot1/plot2
plot
true_pred_plots <- function(df, label){
# Creates plots showing true vs. predicted values
plot <- ggplot(df, aes(trueAzimuth, difference, col = recorder, shape = tone))+
ggtitle(label) +
geom_jitter(size =3, alpha = 0.7, position = position_jitter(width=5,height=0))+
scale_color_manual(values = c("2" =  wes_palette("Darjeeling1",5)[1],
"3"= "black",
"Blue"= wes_palette("Darjeeling1",5)[5],
"Yellow" = wes_palette("Darjeeling1",5)[3],
"yellowGreen" = wes_palette("Darjeeling1",5)[2])) +
scale_shape_manual(values = c("y" = 16,
"echo"= 10)) +
geom_hline(yintercept=0)+
xlim(-185,185)+ # to allow for jitter
ylim(-185,185)+ # to allow for jitter
#xlab("Predicted") +
#ylab("True") +
annotate("text", x = -110, y = 150, label ="") +
theme_minimal()+
theme(legend.position = "none") +
theme(axis.text.x=element_blank())+
theme(axis.text.y=element_blank())+
theme(axis.title.x=element_blank())+
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(size = 10))
return(plot)
}
# get right dataset and get rid of Duplicates
pre <- difData[difData$time == "pre", ]
pre <- pre[, !(names(pre) %in% c("gainTest", "gainAdded"))]
pre <- distinct(pre)
for(i in levels(pre$wp)){
if(i=="n"){
WPstr = "NoWP"
}else{
WPstr = "WP"
}
preWP <- pre[pre$wp == i, ]
for(j in levels(preWP$testTone)){
toneStr = j
# Create Label
label = paste(WPstr, ":",toneStr,sep="")
testDF <- preWP[preWP$testTone == j, ]
# Find Errors!
error_data <- find_error(testDF)
printout <- paste0("\n###############\nFile (with echos):", label, "\nMean Dif:", error_data[1],"\nSD:", error_data[2], "\nR_sq:", error_data[3])
cat(printout)
plot <- true_pred_plots(testDF,label)
assign(label,plot)
#Remove Echos (false positives)
testDF <- testDF[testDF$tone == "y", ]
error_data <- find_error(testDF)
printout <- paste0("\n###############\nFile (without echos):", label, "\nMean Dif:", error_data[1],"\nSD:", error_data[2], "\nR_sq:", error_data[3])
cat(printout)
}
}
plot1 <- `WP:bird` | `NoWP:bird`
plot2 <- `WP:pinknoise` | `NoWP:pinknoise`
plot <- plot1/plot2
plot
